version: '3.7'
services:
  redis:
    image: redis:alpine
    ports:
      -  '6379'
    networks:
      - frontend
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.2'
          memory: 250M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 60s
        order: stop-first
      retart_policy:
        condition: on-failure
  db:
    image: postgres:9.4
    volumes:
      - db-data:/var/lib/postgresql/data
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 300M
      placement:
        constraints: [node.role == manager]
  vote:
    image: dockersamples/examplevotingapp_vote:before
    ports:
      - 5000:80
    networks:
       - frontend
    depends_on:
      - redis
    deploy:
      replicas: 2
      resources:
        limits:
          cpus: '0.1'
          memory: 150M
      placement:
        constraints: [node.role == worker]
      update_config:
        parallelism: 2
      retart_policy:
        condition: on-failure
  result:
    image: dockersamples/examplevotingapp_result:before
    ports:
      - 5001:80
    networks:
       - backend
    depends_on:
      - db
    deploy:
      replicas: 1
      resources:
        limits:
          cpus: '0.2'
          memory: 150M
      update_config:
        parallelism: 1
        delay: 10s
      retart_policy:
        condition: on-failure
  worker:
    image: dockersamples/examplevotingapp_worker
    networks:
       - frontend
       - backend
    deploy:
      mode: replicated
      replicas: 1
      labes: [APP=VOTING]
      resources:
        limits:
          cpus: '0.2'
          memory: 250M
      retart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3
        windows: 120s
      placement:
        constraints: [node.role == manager]
  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - '8080:8080'
    stop_grace_period: 1m30s
    volumes:
      - '/var/run/docker.sock:/var/run/docker.sock'
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 50M
      placement:
        constraints: [node.role == manager]
networks:
    - backend
    - frontend
volumes:
  db-data: